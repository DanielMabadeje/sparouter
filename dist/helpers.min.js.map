{"version":3,"sources":["helpers.js"],"names":["variableChecker","isString","variable","Object","prototype","toString","call","isNumber","isRegExp","isFunction","isBoolean","isObject","isUndefined","isEmpty","_this","isNull","isArray","length","getOwnPropertyNames","typeCheck","ArgumentNotFoundError","argName","name","this","isSet","concat","message","ArgumentTypeError","argType","argValue","_typeof"],"mappings":"sbAAA,IAAMA,gBAAkB,CACpBC,SAAY,SAACC,GACT,MAAoD,oBAA7CC,OAAOC,UAAUC,SAASC,KAAKJ,IAG1CK,SAAY,SAACL,GACT,MAAoD,oBAA7CC,OAAOC,UAAUC,SAASC,KAAKJ,IAG1CM,SAAY,SAACN,GACT,MAAoD,oBAA7CC,OAAOC,UAAUC,SAASC,KAAKJ,IAVxCF,QAAAA,SAAAA,GACFC,MAAyB,mBAAbE,OAAAC,UAACF,SAAYI,KAAAJ,IAIzBK,SAAY,SAAAL,GACR,MAAoD,oBAA7CC,OAAOC,UAAUC,SAAjBC,KAA+BJ,IAItCO,WAAcL,SAAAA,GAVE,MAAA,sBAAAD,OAAAC,UAAAC,SAAAC,KAAAJ,IAAAQ,UAAA,SAAAR,GAiBpBS,MAAyB,qBAAbR,OAAAC,UAACF,SAAYI,KAAAJ,IAIzBO,OAAc,SAAAP,GACV,MAAoD,kBAA7CC,OAAOC,UAAUC,SAAjBC,KAA+BJ,IAItCU,YAAcR,SAAAA,GA1BE,MAAA,uBAAAD,OAAAC,UAAAC,SAAAC,KAAAJ,IAAAW,QAAA,SAAAX,GAiCpBU,OAAeE,MAAAF,YAAAV,IAAAY,MAAaC,OAAAb,IAAA,IAAAA,IAAA,IAAAA,IAAAY,MAAAb,SAAAC,IAAAY,MAAAE,QAAAd,KAAA,IAAAA,EAAAe,QAAAH,MAAAH,SAAAT,IAAA,IAAAC,OAAAe,oBAAAhB,GAAAe,QAI5BJ,MAAU,SAAAX,GACN,OAAWY,MAACF,YAAYV,KAAiBY,MAACC,OAAOb,IAOrDiB,UAAA,cAQG,SAASC,sBAAsBC,GAA/BA,EAASD,EAAAA,WACZC,KAAOC,KAAGD,wBACVE,KAAKD,QAAOtB,gBAAAwB,MAAZH,GAAY,GAAAI,OAAZF,KAAAD,KAAY,MAAAG,OAAZJ,EAAY,qCAAZE,KAAAD,KACAC,KAAKG,SAAU1B,WAEX,OAAOuB,KAAKG,SAEnB,SAAAC,kBAAAN,EAAAO,EAAAC,GAGGR,EAAUA,EAAQhB,WADfuB,EAASD,EAAAA,WACZN,KAAOC,KAAGD,oBACVO,KAAOF,QAAU1B,gBAAjBwB,MAAAH,GAAiB,GAAAI,OAAjBF,KAAAD,KAAiB,aAAAG,OAAjBJ,EAAiB,sBAAAI,OAAjBG,EAAiB,MAAAH,OAAAK,QAAjBD,GAAiB,WAAjBN,KAAAD,KACAC,KAAKD,SAAO,WACPI,OAALH,KAAevB,sBACfA","file":"helpers.min.js","sourcesContent":["const variableChecker = {\r\n    isString :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object String]\";\r\n    },\r\n    \r\n    isNumber :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Number]\";\r\n    },\r\n\r\n    isRegExp :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object RegExp]\";\r\n    },\r\n    \r\n    isArray :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Array]\";\r\n    },\r\n    \r\n    isObject :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Object]\";\r\n    },\r\n\r\n    isFunction :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Function]\";\r\n    },\r\n    \r\n    isBoolean :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Boolean]\";\r\n    },\r\n    \r\n    isNull :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Null]\";\r\n    },\r\n    \r\n    isUndefined :  (variable) =>{\r\n        return Object.prototype.toString.call(variable) === \"[object Undefined]\";\r\n    },\r\n\r\n    isEmpty : (variable) =>{\r\n        return this.isUndefined(variable) || this.isNull(variable) || variable === 0 || variable === false || ((this.isString(variable) || this.isArray(variable)) && variable.length === 0) || (this.isObject(variable) && Object.getOwnPropertyNames(variable).length === 0);\r\n    },\r\n\r\n    isSet : (variable) =>{\r\n        return !this.isUndefined(variable) && !this.isNull(variable);\r\n    },\r\n    \r\n    /**\r\n     * @todo create a type check function\r\n     */\r\n    typeCheck : (...variables) =>{\r\n\r\n    }\r\n}\r\n\r\nexport function ArgumentNotFoundError(argName){\r\n    argName = argName.toString();\r\n    this.name = \"ArgumentNotFoundError\";\r\n    this.message = variableChecker.isSet(argName) ? `${this.name}: ${argName} argument is required. None found` : this.name;\r\n    this.toString = function(){\r\n        return this.message;\r\n    };\r\n}\r\n\r\nexport function ArgumentTypeError(argName, argType, argValue){\r\n    argName = argName.toString();\r\n    argType = argType.toString();\r\n    this.name = \"ArgumentTypeError\";\r\n    this.message = variableChecker.isSet(argName) ? `${this.name}: typeof ${argName} must be equal to ${argType}. ${typeof argValue} found.` : this.name;\r\n    this.toString = function(){\r\n        return this.message;\r\n    };\r\n}\r\n\r\nexport default variableChecker;"]}