{"version":3,"sources":["sparouter.js"],"names":["Router","_classCallCheck","this","routes","requestPath","window","location","pathname","_this","_routeMatched","some","route","match","regEx","params","_getParameterValue","pattern","_notFoundFunc","cb","routeName","arguments","length","undefined","Error","forEach","storedRoutes","name","routeUrl","parameters","_getParameters","newRoute","push","oldUrl","newUrl","toLowerCase","href","url","routeNameFound","Object","getOwnPropertyNames","routeParamsProps","paramsProps","key","hasOwnProperty","replace","indexOf","startIndex","endPosition","loopStarted","startPosition","parameter","substring","paramNames","param","routeParams","array","index","_defineProperty","value"],"mappings":"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","file":"sparouter.js","sourcesContent":["class Router {\r\n    constructor(){\r\n        this.routes = [];\r\n        this.requestPath = window.location.pathname;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Router.\r\n     * Call this method after setting all route paths\r\n     */\r\n    init(){\r\n        this._routeMatched = false;\r\n        this.routes.some(route=>{\r\n            if(this.requestPath.match(`${route.regEx}$`)){\r\n                this._routeMatched = true;\r\n                route.params = this._getParameterValue(route.regEx, route.params);\r\n                return route.callback(this, route.params, route.pattern);// || route.callback.call(this, route.params, route.pattern);\r\n            }\r\n        }, this)\r\n        if(!this._routeMatched){\r\n            if(!this._notFoundFunc){\r\n                return;\r\n            } else {\r\n                return this._notFoundFunc();\r\n            }\r\n        }\r\n    }\r\n\r\n    get(route, cb, routeName = null){\r\n        if (typeof cb !== \"function\") throw new Error(`typeof parameter 2 must be a callback function`);\r\n        \r\n        route = route === \"\" ? \"/\" : route; //empty route will be seen as home page\r\n        route = route.toLowerCase();\r\n        this.routes.forEach(storedRoutes=>{\r\n            if(storedRoutes.pattern === route) throw new Error(`Cannot have two route patterns. Route pattern ${route} already exists`);\r\n        });\r\n\r\n        if(routeName) this.routes.forEach((storedRoutes)=>{\r\n            if(storedRoutes.name === routeName) throw new Error(`Duplicate naming. A route with name ${routeName} already exists`);\r\n        });\r\n        \r\n        let routeUrl = route;\r\n        let parameters = {};\r\n\r\n        if(typeof route === \"string\"){\r\n            this._getParameters(route, (params, newRoute)=>{\r\n                parameters = params;\r\n                route = newRoute;\r\n            });\r\n        }\r\n        \r\n        this.routes.push({\r\n            name: routeName,\r\n            pattern :   routeUrl,\r\n            regEx : route,\r\n            callback : cb,\r\n            params: parameters\r\n        });\r\n        return this;\r\n    }\r\n\r\n    // @TODO create group function for grouping routes\r\n    /*groupGet(groupRoute, route, cb, routeName = null){\r\n        console.log(\"groupingggg!\")\r\n    }\r\n\r\n    group(route, cb, groupName = null){\r\n        this.group.get = this._groupGet;\r\n        cb(this.group);\r\n        /*if (typeof cb !== \"function\") throw new Error(`typeof parameter 2 must be a callback function`);\r\n        \r\n        route = route === \"\" ? \"/\" : route;\r\n        route = route.toLowerCase();\r\n\r\n        if(groupName) this.routes.forEach((storedRoutes)=>{\r\n            if(storedRoutes.name === groupName) throw new Error(`Duplicate naming. A route with name ${routeName} already exists`);\r\n        });\r\n        \r\n        let routeUrl = route;\r\n        let parameters = {};\r\n\r\n        if(typeof route === \"string\"){\r\n            this._getParameters(route, (params, newRoute)=>{\r\n                parameters = params;\r\n                route = newRoute;\r\n            });\r\n        }\r\n        \r\n        this.routes.push({\r\n            name: groupName,\r\n            pattern :  routeUrl,\r\n            regEx : route,\r\n            callback : cb,\r\n            params: parameters\r\n        });*/\r\n        //return this;\r\n    //}\r\n\r\n    redirect(oldUrl, newUrl){\r\n        oldUrl = oldUrl.toLowerCase();\r\n        newUrl = newUrl.toLowerCase();\r\n\r\n        if(oldUrl === newUrl) throw new Error(\"Redirect loop found as both urls are the same\");\r\n\r\n        if(typeof oldUrl === \"string\"){\r\n            this._getParameters(oldUrl, (params, newRoute)=>{\r\n                oldUrl = newRoute;\r\n            });\r\n        }\r\n\r\n        if (this.requestPath.match(`${oldUrl}$`)){\r\n            return window.location.href= newUrl;\r\n        }\r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Returns the url path of a named route.\r\n     * If params is included, the value of the parameters will be passed into the url.\r\n     * @param {string} routeName A string containing the name of the route\r\n     * @param {object} params An object of keys and values containing the parameters of the route\r\n     * @returns {string} url\r\n     */\r\n    pathFor(routeName, params = {}){\r\n        let url;\r\n        let routeNameFound = false;\r\n        this.routes.some(route=>{\r\n            if(route.name === routeName){\r\n                routeNameFound = true;\r\n                url = route.pattern;\r\n                if(route.params.length === 0 || Object.getOwnPropertyNames(route.params).length === 0) return url; // if there are no parameters for this route\r\n\r\n                let routeParamsProps = Object.getOwnPropertyNames(route.params);\r\n                let paramsProps = Object.getOwnPropertyNames(params);\r\n\r\n                // if this route requires some parameters and none given or the required number of params not given\r\n                if(paramsProps.length !== routeParamsProps.length) throw new Error(`The route pattern ${route.pattern} requires ${routeParamsProps.length} parameter(s). ${paramsProps.length} found`)\r\n                \r\n                for(let key in params){\r\n                    if(!route.params.hasOwnProperty(key)) throw new Error(`Invalid route parameter (${key}) found in the given parameters`);\r\n                    url = url.replace(`{${key}}`, params[key])\r\n                }\r\n                return;\r\n            }\r\n        });\r\n        if (!routeNameFound) throw new Error(`Invalid route name (${routeName})`);\r\n        return url;\r\n    }\r\n\r\n    notFound(){\r\n        if(!this._notFoundFunc){\r\n            throw new Error(\"notFoundHandler is not set. Use Router.setNotFoundHandler() method to set it.\");\r\n        } else {\r\n            return this._notFoundFunc();\r\n        }\r\n    }\r\n\r\n    notFoundHandler(cb=null){\r\n\r\n        this._notFoundFunc = cb;\r\n        return this;\r\n    }\r\n\r\n    _getParameters(route, cb){\r\n        let params = [];\r\n        if((route.indexOf(\"{\") && route.indexOf(\"}\")) > -1){\r\n            let startIndex = 0;\r\n            let startPosition = 0;\r\n            let endPosition = 0;\r\n            let loopStarted = 0;\r\n\r\n            while(startIndex <= route.length){\r\n                startPosition = route.indexOf(\"{\", startIndex);\r\n                endPosition = route.indexOf(\"}\", startIndex + loopStarted)\r\n                let parameter = route.substring(startPosition+1, endPosition);\r\n                params.push(parameter);\r\n                startIndex = startIndex + endPosition;\r\n                loopStarted = 1;\r\n            }\r\n        }\r\n        let newRoute = route.replace(/\\{{1}\\w*\\}{1}/gi, \"(.+)\");\r\n        \r\n        return cb(params, newRoute);\r\n    }\r\n\r\n    _getParameterValue(regEx, paramNames){\r\n        let param = [];\r\n        let routeParams = {} // route  parameters in object for\r\n        let array = this.requestPath.match(`${regEx}$`);\r\n        if(array)\r\n            array.forEach((value, index) => {\r\n                if(index !== 0){\r\n                    param.push({\r\n                        [paramNames[index-1]] : value\r\n                    });\r\n                }\r\n            });\r\n        param.forEach(el=>{\r\n            for(let key in el){\r\n                routeParams[key] = el[key];\r\n            }\r\n        })\r\n        return routeParams;\r\n    }\r\n}\r\nRouter = new Router();\r\nexport default Router;"]}